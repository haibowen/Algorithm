public  class demo{

/**

对于所有主键相同的数组，插入排序比选择排序快

主键都相同的数组   插入排序  比较次数N-1次，交换0次
                    选择排序  比较次数n*n/2次，交换0次
					
					
					
					
					
					
					
					
					package com.haibowen;
import edu.princeton.cs.algs4.Heap;
import edu.princeton.cs.algs4.Insertion;
import edu.princeton.cs.algs4.Merge;
import edu.princeton.cs.algs4.Quick;
import edu.princeton.cs.algs4.Selection;
import edu.princeton.cs.algs4.Shell;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.Stopwatch;
  
public class SortCompare {  
    public static double time(String alg, Double[] a){  
        Stopwatch timer = new Stopwatch();  
        if(alg.equals("Insertion")) Insertion.sort(a);  
        if(alg.equals("Selection")) Selection.sort(a);  
        if(alg.equals("Shell")) Shell.sort(a); 
        if(alg.equals("Merge")) Merge.sort(a); 
        if(alg.equals("Quick")) Quick.sort(a); 
        if(alg.equals("Heap")) Heap.sort(a); 
        return timer.elapsedTime();  
    }  
      
    public static double timeRandomInput(String alg, int N, int T){  
        //使用算法alg，将T个长度为N的随机数组排序，所花的时间  
        double total = 0.0;  
        Double[] a = new Double[N];  
        for(int t = 0; t < T; t++){  
            //进行一次测试（生成一个数组并排序）  
            for(int i=0; i<N; i++){  
                a[i] = StdRandom.uniform();  
            }  
            total += time(alg,a);  
        }  
        return total;  
    }  
      
    public static double timeEqualInput(String alg, int N, int T){  
        //使用算法alg, 将T个长度为N的数值全部相等的数组排序，所花的时间  
        double total = 0.0;  
        Double[] a = new Double[N];  
        for(int i=0; i<N; i++){   
            //由于数组元素都相等，即使排序后，也相等，所以只赋值一次  
            a[i] = 1.0;  
        }  
        for(int t=0; t <T; t++){  
            total += time(alg, a);  
        }  
        return total;  
    }  
      
    public static double timeInverseInput(String alg, int N, int T){  
        //使用算法alg，将T个长度为N的逆序数组排序，所花的时间  
        double total = 0.0;  
        Double[] a = new Double[N];  
        for(int t=0; t<T; t++){  
            for(int i=0; i<N; i++){  
                a[i] = 1.0 * (N-i);  
            }  
            total += time(alg, a);  
        }  
        return total;  
    }  
      
    public static void main(String[] args) {  
        String alg1 = StdIn.readString();  
        String alg2 = StdIn.readString();  
        int N = StdIn.readInt();  
        int T = StdIn.readInt();  
        // 数组元素随机的情况下，插入排序快于选择排序  
        double t1 = timeRandomInput(alg1, N, T);  
        double t2 = timeRandomInput(alg2, N, T);  
        StdOut.printf("for %d random Doules\n  %s is", N, alg1);  
        StdOut.printf(" %.1f times faster than %s\n", t2/t1, alg2);  
          
        // 数组元素都相等的情况下，插入排序快于选择排序  
        double t3 = timeEqualInput(alg1, N, T);  
        double t4 = timeEqualInput(alg2, N, T);  
        StdOut.printf("for %d equal Doules\n  %s is", N, alg1);  
        StdOut.printf(" %.1f times faster than %s\n", t4/t3, alg2);  
          
        //数组元素逆序的情况下，插入排序慢于选择排序  
        double t5 = timeInverseInput(alg1, N, T);  
        double t6 = timeInverseInput(alg2, N, T);  
        StdOut.printf("for %d inverse Doules\n  %s is", N, alg1);  
        StdOut.printf(" %.1f times faster than %s\n", t6/t5, alg2);  
    }  
}  



**/






}